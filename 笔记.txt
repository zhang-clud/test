1.什么是版本控制？
-例：修改论文，将原来的论文复制一份进行修改，产生新论文的过程，就是版本控制
2.什么是版本控制系统？
-就是自动帮我们完成上面操作的应用系统或应用程序。
3.版本控制系统如何控制版本？
-将所有需要进行版本控制的文件都提交到一个仓库(隐藏文件夹)，对文件做出的修改都会被这个版本控制系统监测到，如果需要保留这个文件，就要通过版本控制系统的命令将文件提交到仓库，然后版本控制系统就会自动为提交的文件打上版本号
4.仓库分几种？
①本地仓库：建立在本地的文件夹
②远程仓库：建立在互联网的服务器内的文件夹
5.版本控制系统分为几种?
①：分布式版本控制系统：配有本地仓库(电脑上)和远程仓库(远程服务器上)，提交文件的时候会先提交到本地仓库，等到有网络的情况下再从本地仓库提交到远程仓库(比如Git)
②：集中式版本控制系统：只配有远程仓库，提交文件的时候直接提交到远程仓库(比如SVN)
6.什么是Git?
-帮我们管理文件版本的程序，专业名称叫：分布式版本控制系统
7.什么是GitHub？
-担任了远程仓库的角色，就是一个存放到外网服务器上的一个文件夹。除了GitHub之外还有Gitee(码云)
8.SVN：集中式的版本控制系统必须联网才能工作，版本库存放在中央服务器，
--------------------------------------------------------------------------------------
1.Git在本地会保存两个版本的仓库，分为本地仓库和远程仓库
①.本地仓库就是我们平时add、commit的那个仓库
②.远程仓库可以用git remote -v查看(保存在本地的远程仓库)
2.fetch和pull的不同:
fetch只能更新远程仓库的代码为最新的，本地仓库的代码还未被更新，
pull是将本地仓库和远程仓库(本地的)更新到远程的最新版本
3.  $ git init  （Git初始化的命令，用于新建版本库）
--------------------------------------------------------------------------------------
常用命令：
1.查看用户名和邮箱地址：
$ git config user.name
$ git config user.email
2.其他常用命令：
$ git init  初始化git仓库
$ git status  查看仓库状态
$ git diff  查看diffrence
3.分布式版本控制系统，需要每个机器配置名字和email地址：
$ git config --global user.name "your name"
$ git config --global user.email "email@example.com" 
4.添加文件到Git仓库，分为两步：
$ git add <file>添加到本地文件(反复多次使用，添加多个文件)或理解成添加到暂存区
$ git commit 提交到本地库本库(可以一次提交多个)完成
5.撤回修改
$ git checkout--file撤回对工作区文件的修改
$ git reset HEAD file工作区，
-------------------------------------------------------------------------------------
使用Github
1.目的：借助GitHub托管项目代码
2.基本概念：
a.仓库(Repository)：用来存放项目代码，每个项目对应一个仓库，多个项目则有多个仓库
b.收藏(Star)：仓库主页Star按钮，收藏项目。方便下次查看
c.复制克隆项目(Fork)：点击Fork按钮可以复制别人的仓库(test仓库 forked from A/test仓库)，并可以在原来仓库基础上做改进，但是不会影响原来A的项目，复制的仓库是独立存在的
d.发起请求(Pull Request)：基于fork，别人对复制过来的项目做了改进，可以发起请求给原作者，申请将改进添加进原仓库














